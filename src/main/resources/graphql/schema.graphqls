scalar DateTime
scalar Time

type AbortEvent {
    id:ID!
    userName: String!
    eventId: String!
    abortedAt: DateTime!
}

type EventKpi {
    id:ID!
    userName:String!
    eventId:String!
    actionAt:DateTime!
}

type KpiAction {
    id:ID!
    userName:String!
    eventId:String!
}

type QuizzAction{
    id:ID!
    userName:String!
    eventId:String!
    quizId:String!
    passedAt:DateTime!
}

type Session {
    id:ID!
    userName:String!
    eventId:String!
    roomId:String!
    action:String!
    enterActionAt: DateTime
    leaveActionAt: DateTime
    duration: Time
}

type ViewEventAction {
    id:ID!
    userName:String!
    eventId:String!
    seenAt: DateTime
}

type MaxMinSession {
    userName:String!
    roomId:String!
    duration: String!
}

interface Participation {
    getRoomId:String
    getCountParticipants:Int
}
interface CountEventViews {
    getEventId:String
    getCountViews:Int
}

input AbortEventInput {
    userName: String!
    eventId: String!
}

input EventInput {
    userName: String!
    eventId: String!
}

input QuizActionInput {
    userName:String!
    eventId:String!
    quizId:String!
}

input SessionActionInput {
    userName: String!
    eventId: String!
}

input ViewEventActionInput {
    id:ID!
    userName:String!
    eventId:String!
    seenAt: DateTime
}

type Query {
    #  aborted events
    countEventsAborted: Int
    findTotalAbortedEventToday: Int
    findTotalAbortedEventByCurrentWeek: Int
    findTotalAbortedEventByCurrentMonth: Int
    calculateAverageAbortedEventsPerUser: Float
    findUserWithLeastAbortedEvents: String
    findUserWithMostAbortedEvents: String
    #    Add Events
    countEvents :Int
    countEventsByUserName(userName:String) :Int
    findUsernameWithMostEvents :String
    findUsernameWithLeastEvents :String
    calculateAverageEventsPerUser :Float
    getTotalEventsToday :Int
    getTotalEventsThisWeek :Int
    getTotalEventsThisMonth :Int
    getTotalEventsTodayByUsername(userName:String) :Int
    getTotalEventsThisWeekByUsername(userName:String) :Int
    getTotalEventsThisMonthByUsername(userName:String) :Int
    #    Quiz Action
    countQuizzByUser : Int
    countQuizzByEvent : Int
    #    Session
    getSessionDuration(sessionActionINput:SessionActionInput): MaxMinSession
    countParticipants: Int
    countEventsParticipantAt(userName:String): Int
    countParticipantsByRoomId(roomId:String): Int
    getMaxDurationByEventId(eventId:String): Session
    getMinDurationByEventId(eventId:String): Session
    getMaxSession: MaxMinSession
    getMinSession: MaxMinSession
    getMaximalParticipants: Participation
    getMinimalParticipants: Participation
    getLastSessionDurationByUser: MaxMinSession
    #    View Event
    countViewsByUser(userName:String):Int
    countViewsByEvent(eventId:String):Int
    getMaxViews:CountEventViews
    getMinViews:CountEventViews

}
type Mutation {
    abortEvent(abortEventInput:AbortEventInput): AbortEvent
    addEventKpi(eventInput:EventInput):EventKpi
    sendQuizKpi(quizActionInput:QuizActionInput):QuizzAction
    passQuizKpi(quizActionInput:QuizActionInput):QuizzAction
    joinRoomKpi(sessionActionInput:SessionActionInput):Session
    endRoomKpi(sessionActionInput:SessionActionInput):Session
    viewEventKpi(viewEventActionInput:ViewEventActionInput):ViewEventAction
}